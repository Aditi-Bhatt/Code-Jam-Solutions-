#include <bits/stdc++.h>
#include<algorithm>
#include<cmath>
#include<iomanip>
#include<unordered_map>
#include<set>
#include <iterator>
#include <string>
#include <ctype.h>
#include<vector>

using namespace std;

#define ll          long long
#define double      long double
#define endl        '\n'
#define sz(x)       (int)(x).size()
#define pb          push_back
#define lb(v,n)     lower_bound(all((v)),(n))
#define ub(v,n)     upper_bound(all((v)),(n))     

#define vi          vector<int>
#define vii         vector<pii>
#define viiii       vector<pair<pii,pii>>       

#define mi          map<int,int>

#define mii         map<pii,int>

        

#define pii         pair<int,int>

#define piii        pair<int,pair<int,int> >

#define piiii       pair<pii,pii>

#define fi          first

#define se          second

#define mp          make_pair

#define all(a)      (a).begin(),(a).end()

#define rall(a)     (a).rbegin(),(a).rend()

        

#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))

#define reps(X,S,Y) for (int (X) = S;(X) < (Y);++(X))

#define rrep(X,Y) for (int (X) = (Y)-1;(X) >=0;--(X))

#define rreps(X,S,Y) for (int (X) = (Y)-1;(X) >= (S);--(X))

#define repe(X,Y) for ((X) = 0;(X) < (Y);++(X))

#define toit ios::sync_with_stdio(0);cin.tie(0);

        

        


        

int occurs(vector<int> v,int n){

auto it=lb(v,n);auto it1=ub(v,n);int x=it1-it;return x;}

        

double max(double a,double b){

    return a<b ? b:a;

}





const int N = 51;

int n,k;

int matrix[N][N];



bool nxtpos(int &rr, int &cc)

{

    for (rr = 0; rr < n; rr++)

        for (cc = 0; cc < n; cc++)

            if (matrix[rr][cc] == -1)

                return true;

    return false;

}



bool val(int x, int y, int num){

    rep(i,n){

        if(matrix[i][y] == num)

            return false;

    }

    rep(i,n){

        if(matrix[x][i] == num)

            return false;

    }

    return true;

}



bool rec(){

    int xx,yy;

    if(!nxtpos(xx,yy))

        return true;

    

    for(int i=1;i<=n;i++){

        

        if(val(xx,yy,i)){

            matrix[xx][yy] = i;

            if(rec()){

                return true;

            }

            matrix[xx][yy] = -1;

        }

    }

    return false;

}







int main()

{toit

    int t;

    cin>>t;

    

    

   for(int tc=1;tc<=t;tc++){

       

        cin>>n>>k;

        if(n == 1){

            cout<<"Case #"<<tc<<": "<<"POSSIBLE"<<endl;

            cout<<1<<endl;

            continue;

        }

        if(k == n+1 || k == n*n-1){

            cout<<"Case #"<<tc<<": "<<"IMPOSSIBLE"<<endl;

            continue;

        }

        memset(matrix,-1,sizeof matrix);

        rep(i,n){

            matrix[i][i] = k/n;

        }

        int t1 = k%n;

        int i1=0;

        while(t1--){

            matrix[i1][i1]++;

            i1++;

        }

        if((k%n == 1) || (k%n == n-1)){

            matrix[n/2][n/2]++;

            matrix[n/2-1][n/2-1]--;

        }

        if(rec()){

            cout<<"Case #"<<tc<<": "<<"POSSIBLE"<<endl;

            rep(i,n){

                rep(j,n){

                    cout<<matrix[i][j]<<" ";

                }cout<<endl;

            }

        }else{

            cout<<"Case #"<<tc<<": "<<"IMPOSSIBLE"<<endl;

        }

        

        

    }

    return 0;

}









